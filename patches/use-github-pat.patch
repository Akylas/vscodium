diff --git a/extensions/github-authentication/src/githubServer.ts b/extensions/github-authentication/src/githubServer.ts
index 50f8983..74cbefb 100644
--- a/extensions/github-authentication/src/githubServer.ts
+++ b/extensions/github-authentication/src/githubServer.ts
@@ -6,24 +6,14 @@
 import * as nls from 'vscode-nls';
 import * as vscode from 'vscode';
 import fetch, { Response } from 'node-fetch';
-import { v4 as uuid } from 'uuid';
-import { PromiseAdapter, promiseFromEvent } from './common/utils';
 import { ExperimentationTelemetry } from './experimentationService';
 import { AuthProviderType } from './github';
 import { Log } from './common/logger';
-import { isSupportedEnvironment } from './common/env';
-import { LoopbackAuthServer } from './authServer';
-import path = require('path');
 
 const localize = nls.loadMessageBundle();
 const CLIENT_ID = '01ab8ac9400c4e429b23';
-const GITHUB_AUTHORIZE_URL = 'https://github.com/login/oauth/authorize';
-// TODO: change to stable when that happens
-const GITHUB_TOKEN_URL = 'https://vscode.dev/codeExchangeProxyEndpoints/github/login/oauth/access_token';
 const NETWORK_ERROR = 'network error';
 
-const REDIRECT_URL_STABLE = 'https://vscode.dev/redirect';
-const REDIRECT_URL_INSIDERS = 'https://insiders.vscode.dev/redirect';
 
 class UriEventHandler extends vscode.EventEmitter<vscode.Uri> implements vscode.UriHandler {
 	constructor(private readonly Logger: Log) {
@@ -113,78 +103,22 @@ export class GitHubServer implements IGitHubServer {
 	friendlyName = 'GitHub';
 	type = AuthProviderType.github;
 
-	private _pendingNonces = new Map<string, string[]>();
-	private _codeExchangePromises = new Map<string, { promise: Promise<string>; cancel: vscode.EventEmitter<void> }>();
 	private _disposable: vscode.Disposable;
 	private _uriHandler = new UriEventHandler(this._logger);
-	private readonly getRedirectEndpoint: Thenable<string>;
 
 	constructor(private readonly _supportDeviceCodeFlow: boolean, private readonly _logger: Log, private readonly _telemetryReporter: ExperimentationTelemetry) {
 		this._disposable = vscode.window.registerUriHandler(this._uriHandler);
-
-		this.getRedirectEndpoint = vscode.commands.executeCommand<{ [providerId: string]: string } | undefined>('workbench.getCodeExchangeProxyEndpoints').then((proxyEndpoints) => {
-			// If we are running in insiders vscode.dev, then ensure we use the redirect route on that.
-			let redirectUri = REDIRECT_URL_STABLE;
-			if (proxyEndpoints?.github && new URL(proxyEndpoints.github).hostname === 'insiders.vscode.dev') {
-				redirectUri = REDIRECT_URL_INSIDERS;
-			}
-			return redirectUri;
-		});
 	}
 
 	dispose() {
 		this._disposable.dispose();
 	}
 
-	// TODO@joaomoreno TODO@TylerLeonhardt
-	private async isNoCorsEnvironment(): Promise<boolean> {
-		const uri = await vscode.env.asExternalUri(vscode.Uri.parse(`${vscode.env.uriScheme}://vscode.github-authentication/dummy`));
-		return (uri.scheme === 'https' && /^((insiders\.)?vscode|github)\./.test(uri.authority)) || (uri.scheme === 'http' && /^localhost/.test(uri.authority));
-	}
-
 	public async login(scopes: string): Promise<string> {
 		this._logger.info(`Logging in for the following scopes: ${scopes}`);
 
 		// Used for showing a friendlier message to the user when the explicitly cancel a flow.
 		let userCancelled: boolean = false;
-		const yes = localize('yes', "Yes");
-		const no = localize('no', "No");
-		const getMessage = () => userCancelled
-			? localize('userCancelledMessage', "Having trouble logging in? Would you like to try a different way?")
-			: localize('otherReasonMessage', "You have not yet finished authorizing this extension to use GitHub. Would you like to keep trying?");
-
-		const nonce = uuid();
-		const callbackUri = await vscode.env.asExternalUri(vscode.Uri.parse(`${vscode.env.uriScheme}://vscode.github-authentication/did-authenticate?nonce=${encodeURIComponent(nonce)}`));
-
-		const supported = isSupportedEnvironment(callbackUri);
-		if (supported) {
-			try {
-				return await this.doLoginWithoutLocalServer(scopes, nonce, callbackUri);
-			} catch (e) {
-				this._logger.error(e);
-				userCancelled = e.message ?? e === 'User Cancelled';
-			}
-
-			let choice = await vscode.window.showWarningMessage(getMessage(), yes, no);
-			if (choice !== yes) {
-				throw new Error('Cancelled');
-			}
-		}
-
-		// Starting a local server isn't supported in web
-		if (vscode.env.uiKind === vscode.UIKind.Desktop) {
-			try {
-				return await this.doLoginWithLocalServer(scopes);
-			} catch (e) {
-				this._logger.error(e);
-				userCancelled = e.message ?? e === 'User Cancelled';
-			}
-
-			let choice = await vscode.window.showWarningMessage(getMessage(), yes, no);
-			if (choice !== yes) {
-				throw new Error('Cancelled');
-			}
-		}
 
 		if (this._supportDeviceCodeFlow) {
 			try {
@@ -205,84 +139,6 @@ export class GitHubServer implements IGitHubServer {
 		throw new Error(userCancelled ? 'Cancelled' : 'No auth flow succeeded.');
 	}
 
-	private async doLoginWithoutLocalServer(scopes: string, nonce: string, callbackUri: vscode.Uri): Promise<string> {
-		this._logger.info(`Trying without local server... (${scopes})`);
-		return await vscode.window.withProgress<string>({
-			location: vscode.ProgressLocation.Notification,
-			title: localize('signingIn', "Signing in to github.com..."),
-			cancellable: true
-		}, async (_, token) => {
-			const existingNonces = this._pendingNonces.get(scopes) || [];
-			this._pendingNonces.set(scopes, [...existingNonces, nonce]);
-			const redirectUri = await this.getRedirectEndpoint;
-			const searchParams = new URLSearchParams([
-				['client_id', CLIENT_ID],
-				['redirect_uri', redirectUri],
-				['scope', scopes],
-				['state', encodeURIComponent(callbackUri.toString(true))]
-			]);
-			const uri = vscode.Uri.parse(`${GITHUB_AUTHORIZE_URL}?${searchParams.toString()}`);
-			await vscode.env.openExternal(uri);
-
-			// Register a single listener for the URI callback, in case the user starts the login process multiple times
-			// before completing it.
-			let codeExchangePromise = this._codeExchangePromises.get(scopes);
-			if (!codeExchangePromise) {
-				codeExchangePromise = promiseFromEvent(this._uriHandler.event, this.handleUri(scopes));
-				this._codeExchangePromises.set(scopes, codeExchangePromise);
-			}
-
-			try {
-				return await Promise.race([
-					codeExchangePromise.promise,
-					new Promise<string>((_, reject) => setTimeout(() => reject('Cancelled'), 60000)),
-					promiseFromEvent<any, any>(token.onCancellationRequested, (_, __, reject) => { reject('User Cancelled'); }).promise
-				]);
-			} finally {
-				this._pendingNonces.delete(scopes);
-				codeExchangePromise?.cancel.fire();
-				this._codeExchangePromises.delete(scopes);
-			}
-		});
-	}
-
-	private async doLoginWithLocalServer(scopes: string): Promise<string> {
-		this._logger.info(`Trying with local server... (${scopes})`);
-		return await vscode.window.withProgress<string>({
-			location: vscode.ProgressLocation.Notification,
-			title: localize('signingInAnotherWay', "Signing in to github.com..."),
-			cancellable: true
-		}, async (_, token) => {
-			const redirectUri = await this.getRedirectEndpoint;
-			const searchParams = new URLSearchParams([
-				['client_id', CLIENT_ID],
-				['redirect_uri', redirectUri],
-				['scope', scopes],
-			]);
-			const loginUrl = `${GITHUB_AUTHORIZE_URL}?${searchParams.toString()}`;
-			const server = new LoopbackAuthServer(path.join(__dirname, '../media'), loginUrl);
-			const port = await server.start();
-
-			let codeToExchange;
-			try {
-				vscode.env.openExternal(vscode.Uri.parse(`http://127.0.0.1:${port}/signin?nonce=${encodeURIComponent(server.nonce)}`));
-				const { code } = await Promise.race([
-					server.waitForOAuthResponse(),
-					new Promise<any>((_, reject) => setTimeout(() => reject('Cancelled'), 60000)),
-					promiseFromEvent<any, any>(token.onCancellationRequested, (_, __, reject) => { reject('User Cancelled'); }).promise
-				]);
-				codeToExchange = code;
-			} finally {
-				setTimeout(() => {
-					void server.stop();
-				}, 5000);
-			}
-
-			const accessToken = await this.exchangeCodeForToken(codeToExchange);
-			return accessToken;
-		});
-	}
-
 	private async doLoginDeviceCodeFlow(scopes: string): Promise<string> {
 		this._logger.info(`Trying device code flow... (${scopes})`);
 
@@ -397,64 +253,6 @@ export class GitHubServer implements IGitHubServer {
 		});
 	}
 
-	private handleUri: (scopes: string) => PromiseAdapter<vscode.Uri, string> =
-		(scopes) => (uri, resolve, reject) => {
-			const query = new URLSearchParams(uri.query);
-			const code = query.get('code');
-			const nonce = query.get('nonce');
-			if (!code) {
-				reject(new Error('No code'));
-				return;
-			}
-			if (!nonce) {
-				reject(new Error('No nonce'));
-				return;
-			}
-
-			const acceptedNonces = this._pendingNonces.get(scopes) || [];
-			if (!acceptedNonces.includes(nonce)) {
-				// A common scenario of this happening is if you:
-				// 1. Trigger a sign in with one set of scopes
-				// 2. Before finishing 1, you trigger a sign in with a different set of scopes
-				// In this scenario we should just return and wait for the next UriHandler event
-				// to run as we are probably still waiting on the user to hit 'Continue'
-				this._logger.info('Nonce not found in accepted nonces. Skipping this execution...');
-				return;
-			}
-
-			resolve(this.exchangeCodeForToken(code));
-		};
-
-	private async exchangeCodeForToken(code: string): Promise<string> {
-		this._logger.info('Exchanging code for token...');
-
-		const proxyEndpoints: { [providerId: string]: string } | undefined = await vscode.commands.executeCommand('workbench.getCodeExchangeProxyEndpoints');
-		const endpointUrl = proxyEndpoints?.github ? `${proxyEndpoints.github}login/oauth/access_token` : GITHUB_TOKEN_URL;
-
-		const body = `code=${code}`;
-		const result = await fetch(endpointUrl, {
-			method: 'POST',
-			headers: {
-				Accept: 'application/json',
-				'Content-Type': 'application/x-www-form-urlencoded',
-				'Content-Length': body.toString()
-
-			},
-			body
-		});
-
-		if (result.ok) {
-			const json = await result.json();
-			this._logger.info('Token exchange success!');
-			return json.access_token;
-		} else {
-			const text = await result.text();
-			const error = new Error(text);
-			error.name = 'GitHubTokenExchangeError';
-			throw error;
-		}
-	}
-
 	private getServerUri(path: string = '') {
 		const apiUri = vscode.Uri.parse('https://api.github.com');
 		return vscode.Uri.parse(`${apiUri.scheme}://${apiUri.authority}${path}`);
@@ -464,44 +262,7 @@ export class GitHubServer implements IGitHubServer {
 		return getUserInfo(token, this.getServerUri('/user'), this._logger);
 	}
 
-	public async sendAdditionalTelemetryInfo(token: string): Promise<void> {
-		if (!vscode.env.isTelemetryEnabled) {
-			return;
-		}
-		const nocors = await this.isNoCorsEnvironment();
-
-		if (nocors) {
-			return;
-		}
-
-		try {
-			const result = await fetch('https://education.github.com/api/user', {
-				headers: {
-					Authorization: `token ${token}`,
-					'faculty-check-preview': 'true',
-					'User-Agent': 'Visual-Studio-Code'
-				}
-			});
-
-			if (result.ok) {
-				const json: { student: boolean; faculty: boolean } = await result.json();
-
-				/* __GDPR__
-					"session" : {
-						"isEdu": { "classification": "NonIdentifiableDemographicInfo", "purpose": "FeatureInsight" }
-					}
-				*/
-				this._telemetryReporter.sendTelemetryEvent('session', {
-					isEdu: json.student
-						? 'student'
-						: json.faculty
-							? 'faculty'
-							: 'none'
-				});
-			}
-		} catch (e) {
-			// No-op
-		}
+	public async sendAdditionalTelemetryInfo(_: string): Promise<void> {
 	}
 
 	public async checkEnterpriseVersion(token: string): Promise<void> {
